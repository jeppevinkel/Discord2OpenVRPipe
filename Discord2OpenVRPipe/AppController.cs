using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Drawing.Imaging;
using System.IO;
using System.Linq;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Threading;
using Discord;
using Discord.WebSocket;
using Discord2OpenVRPipe.Properties;
using ImageMagick;
using Newtonsoft.Json;
using nQuant;
using Valve.VR;
using Websocket.Client;
using Color = System.Drawing.Color;
using Image = System.Drawing.Image;
using ImageFormat = System.Drawing.Imaging.ImageFormat;

namespace Discord2OpenVRPipe
{
    public class AppController
    {
        private bool _openVRConnected = false;
        private bool _discordConnected = false;
        private bool _notificationPipeConnected = false;
        private EasyOpenVRSingleton _vr = EasyOpenVRSingleton.Instance;
        private readonly Action<bool> _openvrStatusAction = delegate(bool b) { Debug.WriteLine($"[OpenVR] {(b == true ? "Connected" : "Disconnected")}"); };
        private readonly Action<bool> _discordStatusAction = delegate(bool b) { Debug.WriteLine($"[Discord] {(b == true ? "Connected" : "Disconnected")}"); };
        private readonly Action<string> _discordReadyAction = delegate(string ch) { Debug.WriteLine($"[Discord] Channel: {ch}"); };
        private readonly Action<bool> _notificationPipeAction = delegate(bool b) { Debug.WriteLine($"[Pipe] {(b == true ? "Connected" : "Disconnected")}"); };
        private bool _shouldShutDown = false;
        private DiscordSocketClient _discordClient;
        private WebsocketClient _notificationPipe;
        private MainWindow _mainWindow;

        public AppController(MainWindow mainWindow, Action<bool> openvrStatusAction, Action<bool> discordStatusAction, Action<string> discordReadyAction, Action<bool> notificationPipeAction)
        {
            _mainWindow = mainWindow;
            _openvrStatusAction += openvrStatusAction;
            _discordStatusAction += discordStatusAction;
            _discordReadyAction += discordReadyAction;
            _notificationPipeAction += notificationPipeAction;
            var thread = new Thread(Worker);
            if (!thread.IsAlive) thread.Start();
            var discordThread = new Task(DiscordMain);
            discordThread.Start();
        }

        public IReadOnlyCollection<SocketGuild> GetGuilds()
        {
            return _discordClient.Guilds;
        }

        public SocketGuild GetGuild(ulong id)
        {
            return _discordClient.GetGuild(id);
        }

        public SocketChannel GetChannel(ulong id)
        {
            return _discordClient.GetChannel(id);
        }

        private readonly string _testImage =
            "";

        public void TestPipe(NotificationStyleConfig notificationStyleConfig = null)
        {
            PushPipe(_testImage, notificationStyleConfig);
        }
        
        public void PushPipe(string imgData, NotificationStyleConfig notificationStyleConfig = null)
        {
            var notificationStyle = notificationStyleConfig ?? Properties.Settings.Default.NotificationStyle;
            
            var json = JsonConvert.SerializeObject(notificationStyle.GetNotification(imgData));

            Debug.WriteLine(json);
            
            _notificationPipe.Send(json);
        }
        
        public void PushPipe(string imgData, string watermark, Rect textArea, NotificationStyleConfig notificationStyleConfig = null)
        {
            var notificationStyle = notificationStyleConfig ?? Properties.Settings.Default.NotificationStyle;
            
            var savedCol = Properties.Settings.Default.WatermarkColor;

            var json = JsonConvert.SerializeObject(notificationStyle.GetNotification(imgData).WriteText(
                watermark, textArea, "Verdana", 21, savedCol, NotificationHorizontalAlignment.Near, NotificationVerticalAlignment.Far));

            Debug.WriteLine(json);
            
            _notificationPipe.Send(json);
        }
        
        public async void PushPipeAsync(Task<string> imgDataPromise, NotificationStyleConfig notificationStyleConfig = null)
        {
            var imgData = await imgDataPromise;
            PushPipe(imgData, notificationStyleConfig);
        }

        DateTimeOffset cooldownExpiry = DateTimeOffset.UtcNow;
        
        private async void DiscordMain()
        {
            Thread.CurrentThread.IsBackground = true;

            var config = new DiscordSocketConfig()
            {
                GatewayIntents = GatewayIntents.MessageContent | GatewayIntents.GuildMessages | GatewayIntents.Guilds,
            };
            _discordClient = new DiscordSocketClient(config);
            _discordClient.Log += message =>
            {
                Debug.WriteLine($"[Discord] {message.ToString()}");
                return Task.CompletedTask;
            };

            _discordClient.LoggedIn += () =>
            {
                _discordStatusAction.Invoke(true);
                _discordConnected = true;
                return Task.CompletedTask;
            };
            _discordClient.LoggedOut += () =>
            {
                _discordStatusAction.Invoke(false);
                _discordConnected = false;
                return Task.CompletedTask;
            };
            _discordClient.Ready += () =>
            {
                SocketChannel channel = _discordClient.GetChannel(Properties.Settings.Default.DiscordChannelId);
                if (channel is SocketTextChannel txtChannel)
                {
                    _discordReadyAction.Invoke(txtChannel.Name);
                }
                else
                {
                    _discordReadyAction.Invoke("          ");
                }
                
                return Task.CompletedTask;
            };

            _discordClient.MessageReceived += message =>
            {
                if (message.Author.IsBot ||
                    !(message.Channel is SocketTextChannel channel) || channel.Guild.Id != Properties.Settings.Default.DiscordServerId)
                {
                    return Task.CompletedTask;
                }
                
                if (message.Channel.Id == Properties.Settings.Default.DiscordCommandChannelId && message.Content.StartsWith(Properties.Settings.Default.CommandPrefix) && message.Author is SocketGuildUser member)
                {
                    if (member.Roles.All(r => r.Id != Settings.Default.DiscordModeratorRoleId))
                    {
                        channel.SendMessageAsync("Fuck off you moderator wannabe!");
                        return Task.CompletedTask;
                    }
                    
                    var command =
                        DiscordCommand.Parse(
                            message.Content.Remove(0, Properties.Settings.Default.CommandPrefix.Length));

                    switch (command.Command)
                    {
                        case "ping":
                        {
                            message.Channel.SendMessageAsync($"Pong! {string.Join(" ", command.Args)}");
                        } break;
                        case "cooldown":
                        {
                            var act = new Action<DiscordCommand>(command =>
                            {
                                if (command.Args.Length != 1)
                                {
                                    message.Channel.SendMessageAsync(
                                        "You have to supply either off or the length of the cooldown in minutes.");
                                    return;
                                }

                                if (command.Args[0] == "off")
                                {
                                    _mainWindow.CooldownEnabled = false;
                                    message.Channel.SendMessageAsync(
                                        $"The cooldown has been disabled.");
                                    return;
                                } else if (command.Args[0] == "on")
                                {
                                    _mainWindow.CooldownEnabled = true;
                                    message.Channel.SendMessageAsync(
                                        $"The cooldown has been enabled.");
                                    return;
                                }
                                else if (double.TryParse(command.Args[0], out var newCooldown))
                                {
                                    var max = _mainWindow.Cooldown.Maximum;
                                    var min = _mainWindow.Cooldown.Minimum;

                                    if (newCooldown > max || newCooldown < min)
                                    {
                                        message.Channel.SendMessageAsync(
                                            $"The cooldown has to be more than {min} minutes and less than {max} minutes.");
                                        return;
                                    }

                                    _mainWindow.CooldownEnabled = true;
                                    _mainWindow.SetCooldown(newCooldown);

                                    message.Channel.SendMessageAsync(
                                        $"The cooldown has been set to {command.Args[0]} minutes.");
                                    return;
                                }
                                else
                                {
                                    message.Channel.SendMessageAsync(
                                        "The supplied value is invalid. It must be either `off` or a number.");
                                    return;
                                }
                            });
                            _mainWindow.Dispatcher.Invoke(act, command);
                        } break;
                    }
                    
                    return Task.CompletedTask;
                }

                if (message.Channel.Id != Properties.Settings.Default.DiscordChannelId)
                {
                    return Task.CompletedTask;
                }

                if (!message.Attachments.Any(a => a.Filename.EndsWith(".png") || a.Filename.EndsWith(".jpg") || a.Filename.EndsWith(".jpeg") || a.Filename.EndsWith(".gif"))) return Task.CompletedTask;

                if (Properties.Settings.Default.CooldownEnabled && cooldownExpiry > DateTimeOffset.UtcNow)
                {
                    var timeLeft = (cooldownExpiry - DateTimeOffset.UtcNow);
                    message.Channel.SendMessageAsync($"Fuck you this is too much! Try again in {timeLeft.Minutes} minutes and {timeLeft.Seconds} seconds you idiot!");
                    return Task.CompletedTask;
                }
                
                foreach (Attachment attachment in message.Attachments.Where(a => a.Filename.EndsWith(".png") || a.Filename.EndsWith(".jpg") || a.Filename.EndsWith(".jpeg") || a.Filename.EndsWith(".gif")))
                {
                    using var image = new MagickImage(attachment.Url);
                    
                    var scale = Math.Min(1280f / image.Width, (720f / image.Height));
                    var newWidth = (int) (image.Width * scale);
                    var newHeight = (int) (image.Height * scale);
                    
                    var isGif = image.Format == MagickFormat.Gif;
                    if (isGif)
                    {
                        using var col = new MagickImageCollection(attachment.Url);
                        col.Coalesce();

                        scale = Math.Min(1280f / image.Width, (720f / image.Height));
                        newWidth = (int) (image.Width * scale);
                        newHeight = (int) (image.Height * scale);
                        
                        foreach (var frame in col)
                        {
                            if (newWidth < frame.Width || newHeight < frame.Height)
                            {
                                frame.Resize(newWidth, newHeight);
                            }
                            
                            // WatermarkImage(frame, message.Author.Username);
                            
                            var settings = new QuantizeSettings();
                            settings.Colors = 256;
                            frame.Quantize(settings);
                        }
                        
                        col.Optimize();
                        var gif = col.ToBase64(MagickFormat.Gif);
                        PushPipe(gif, message.Author.Username, new Rect(5, image.Height - 5 - 42, image.Width-5, 42));
                        Debug.WriteLine(gif.Length);
                        Debug.WriteLine($"{newWidth}/{newHeight}");
                        break;
                        
                        continue;
                    }

                    image.Resize(newWidth, newHeight);

                    if (Properties.Settings.Default.WatermarkImages)
                        WatermarkImage(image, message.Author.Username);
                        
                    image.Quantize(new QuantizeSettings());
                    
                    message.Channel.SendMessageAsync($"I have piped {attachment.Filename} to VR.");
                    PushPipe(image.ToBase64());
                    
                    cooldownExpiry = DateTimeOffset.UtcNow.AddMinutes(Properties.Settings.Default.CooldownMinutes);
                }
                
                return Task.CompletedTask;
            };

            ReconnectDiscord();
        }

        public Bitmap WatermarkBitmap(Bitmap bmp, string watermark)
        {
            using (Graphics g = Graphics.FromImage(bmp))
            {
                Font f = new Font("Verdana", 21);
                var savedCol = Properties.Settings.Default.WatermarkColor;
                g.DrawString(watermark, f, new SolidBrush(Color.FromArgb(savedCol.R, savedCol.G, savedCol.B)), 5, bmp.Height - f.Height - 5);
            }

            return bmp;
        }

        public void WatermarkImage(IMagickImage<byte> image, string watermark)
        {
            var savedCol = Properties.Settings.Default.WatermarkColor;
            new Drawables()
                .FontPointSize(21)
                .Font("Verdana")
                .FillColor(new MagickColor(savedCol.R, savedCol.G, savedCol.B, savedCol.A))
                .Text(5, image.Height - 5, watermark)
                .Draw(image);
        }
        
        public Bitmap ResizeBitmap(Bitmap bmp, int width, int height)
        {
            // var resized = new Bitmap(width, height);
            // using (var graphics = Graphics.FromImage(resized))
            // {
            //     graphics.CompositingQuality = CompositingQuality.HighSpeed;
            //     graphics.InterpolationMode = InterpolationMode.HighQualityBicubic;
            //     graphics.CompositingMode = CompositingMode.SourceCopy;
            //     graphics.DrawImage(bmp, 0, 0, width, height);
            // }
            //
            // return resized;
            
            var isGif = bmp.RawFormat.Equals(ImageFormat.Gif);

            if (isGif)
            {
                // var collection = new MagickImageCollection(bmp.);
                Image res = new Bitmap(width, height);
                var frameDimensions = bmp.FrameDimensionsList;
                for (int frameNumber = 0; frameNumber < frameDimensions.Length; frameNumber++)
                {
                    bmp.SelectActiveFrame(new FrameDimension(frameDimensions[frameNumber]), frameNumber);
                    Image frame = new Bitmap(width, height);
                    using (Graphics g = Graphics.FromImage(frame))
                    {
                        g.DrawImage(bmp, 0, 0, width, height);
                    }
                    // res.frame
                }
            }
            
            Bitmap result = new Bitmap(width, height);
            using (Graphics g = Graphics.FromImage(result))
            {
                g.DrawImage(bmp, 0, 0, width, height);
            }
 
            return result;
        }

        public async void ReconnectDiscord()
        {
            if (_discordClient is null)
            {
                var discordThread = new Task(DiscordMain);
                discordThread.Start();
                return;
            }
            if (_discordConnected)
            {
                await _discordClient.LogoutAsync();
            }
            
            try
            {
                await _discordClient.LoginAsync(TokenType.Bot, Properties.Settings.Default.BotToken);
                await _discordClient.StartAsync();
            }
            catch (Exception e)
            {
                Debug.WriteLine(e);
            }
        }
        
        private void Worker()
        {
            var vrInitComplete = false;
            var pipeInitComplete = false;
            DateTimeOffset lastStatusUpdate = DateTimeOffset.UtcNow;

            Thread.CurrentThread.IsBackground = true;
            while (true)
            {
                if (_openVRConnected)
                {
                    if (!vrInitComplete)
                    {
                        vrInitComplete = true;
                        _vr.AddApplicationManifest("./app.vrmanifest", "jeppevinkel.discord2openvrpipe", true);
                        Debug.WriteLine(Path.GetFullPath("./app.vrmanifest"));
                        _openvrStatusAction.Invoke(true);
                        RegisterEvents();
                    }
                    else
                    {
                        _vr.UpdateEvents(false);
                    }
                    Thread.Sleep(250);
                }
                else
                {
                    Debug.WriteLine("Initializing OpenVR...");
                    _openVRConnected = _vr.Init();
                    Thread.Sleep(2000);
                }

                if (_notificationPipeConnected)
                {
                    
                }
                else
                {
                    if (!pipeInitComplete)
                    {
                        var rawUrl = $"ws://localhost:{Properties.Settings.Default.PipePort.ToString()}";
                        var url = new Uri(rawUrl);
                        _notificationPipe =
                            new WebsocketClient(url);

                        _notificationPipe.IsReconnectionEnabled = true;
                        // _notificationPipe.ReconnectTimeout = TimeSpan.FromSeconds(5);

                        _notificationPipe.ReconnectionHappened.Subscribe(info =>
                        {
                            _notificationPipeAction.Invoke(true);
                            _notificationPipeConnected = true;
                            Debug.WriteLine($"[Pipe RC] {info.Type}, {info.ToString()}");
                        });

                        _notificationPipe.DisconnectionHappened.Subscribe(info =>
                        {
                            _notificationPipeAction.Invoke(false);
                            _notificationPipeConnected = false;
                            Debug.WriteLine($"[Pipe DC] {info.Type}, {info.CloseStatusDescription}");
                        });

                        _notificationPipe.MessageReceived.Subscribe(msg =>
                        {
                            Debug.WriteLine($"[Pipe] RECV: {msg}");
                        });

                        _notificationPipe.Start();
                        pipeInitComplete = true;
                    }
                    else
                    {
                        
                    }
                }

                if (_shouldShutDown)
                {
                    _shouldShutDown = false;
                    vrInitComplete = false;
                    pipeInitComplete = false;
                    _vr.AcknowledgeShutdown();
                    Thread.Sleep(500);
                    _vr.Shutdown();
                    _openvrStatusAction.Invoke(false);
                }

                if (_discordConnected && Settings.Default.CooldownEnabled && (DateTimeOffset.UtcNow.Subtract(lastStatusUpdate) > TimeSpan.FromSeconds(10)) && (cooldownExpiry > DateTimeOffset.UtcNow))
                {
                    var str = $"Cooldown: {(cooldownExpiry - DateTimeOffset.UtcNow).ToString("mm\\:ss")}";
                    Debug.WriteLine(str);
                    _discordClient.SetActivityAsync(new StreamingGame(
                        str,
                        "https://twitch.tv/c0ldvengeance"));
                    
                    lastStatusUpdate = DateTimeOffset.UtcNow;
                } else if (_discordConnected && Settings.Default.CooldownEnabled && (DateTimeOffset.UtcNow.Subtract(lastStatusUpdate) > TimeSpan.FromSeconds(10)) && _discordClient.Activity is not null)
                {
                    _discordClient.SetActivityAsync(null);
                    
                    lastStatusUpdate = DateTimeOffset.UtcNow;
                }
            }
        }

        private void RegisterEvents()
        {
            _vr.RegisterEvent(EVREventType.VREvent_Quit, (data) =>
            {
                _openVRConnected = false;
                _shouldShutDown = true;
                });
        }
        
        public async static Task<string> GetImageAsBase64Url(string url)
        {
            using (var client = new HttpClient())
            {
                var bytes = await client.GetByteArrayAsync(url);
                return Convert.ToBase64String(bytes);
            }
        }

        public async Task<Bitmap> GetImageAsBitmapUrl(string url)
        {
            System.Net.WebRequest request =
                System.Net.WebRequest.Create(
                    url);
            System.Net.WebResponse response = await request.GetResponseAsync();
            System.IO.Stream responseStream =
                response.GetResponseStream();
            if (responseStream != null)
            {
                Bitmap bitmap = new Bitmap(responseStream);
                return bitmap;
            }
            else
            {
                return null;
            }
        }
        
        public void Shutdown()
        {
            _shouldShutDown = true;
        }
    }

    public class DiscordCommand
    {
        public string Command { get; set; }
        public string[] Args { get; set; }

        public DiscordCommand(string command, IEnumerable<string> args)
        {
            Command = command;
            Args = args.ToArray();
        }

        public static DiscordCommand Parse(string command)
        {
            var strings = command.Split(' ');
            return new DiscordCommand(strings.First(), strings.Skip(1));
        }
    }
}